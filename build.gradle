/*
 * Copyright (c) 2017 the ACRA team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.android.build.gradle.LibraryPlugin
import com.jfrog.bintray.gradle.BintrayPlugin

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidBuildPluginVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayPluginVersion"
        classpath "net.researchgate:gradle-release:$releasePluginVersion"
        classpath 'digital.wup:android-maven-publish:3.6.2'
    }
}
apply plugin: 'net.researchgate.release'

def initPublication = { MavenPublication publication ->
    publication.pom {
        name = 'ACRA'
        description = 'Publishes reports of Android application crashes to an end point.'
        url = 'http://acra.ch'
        scm {
            connection = 'scm:git:https://github.com/F43nd1r/acra.git'
            developerConnection = 'scm:git:git@github.com:F43nd1r/acra.git'
            url = 'https://github.com/F43nd1r/acra.git'
        }
        licenses {
            license {
                name = 'Apache-2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
            }
        }
        developers {
            developer {
                id = 'kevin.gaudin'
                name = 'Kevin Gaudin'
            }
            developer {
                id = 'william.ferguson'
                name = 'William Ferguson'
            }
            developer {
                id = 'f43nd1r'
                name = 'Lukas Morawietz'
            }
        }
    }
}

release {
    tagTemplate = '$name-$version'
    git {
        pushToRemote = 'ACRA'
        requireBranch = 'master'
    }
}

task build {
    subprojects.each {
        beforeReleaseBuild.dependsOn "${it.path}:clean"
        dependsOn "${it.path}:build"
    }
}

subprojects {
    repositories {
        jcenter()
        google()
    }
    plugins.withType(LibraryPlugin) {
        android {
            compileSdkVersion Integer.parseInt(androidVersion)
            buildToolsVersion "$buildToolsVersion"
            defaultConfig {
                minSdkVersion androidMinVersion
                targetSdkVersion androidVersion
                versionName version
            }
            buildTypes {
                release {
                    minifyEnabled false
                }
            }
            lintOptions {
                abortOnError false
            }
            testOptions {
                unitTests {
                    includeAndroidResources = true
                    all {
                        systemProperty 'robolectric.logging.enabled', true
                    }
                }
            }
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            testImplementation "junit:junit:$junitVersion"
            testImplementation "org.robolectric:robolectric:$robolectricVersion"
            testImplementation "androidx.test:core:$androidTestVersion"
        }

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs + files("${project.buildDir}/generated/source/aidl/release") + files("${project.buildDir}/generated/source/apt/release")
            classpath += files(android.getBootClasspath().join(File.pathSeparator)) + files("${project.buildDir}/generated/source/r/release")
            options.with {
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
            }
            doFirst {
                try {
                    classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
                } catch (e) {
                    logger.warn 'failed to get classpath for javadoc', e
                }
            }
            afterEvaluate {
                dependsOn assembleRelease
                options { opt ->
                    project.configurations.implementation.getAllDependencies().each { dep ->
                        if (dep.group != project.group) return
                        try {
                            opt.linksOffline "http://www.javadoc.io/page/${dep.group}/${dep.name}/${dep.version}/", "${rootProject.childProjects[dep.name].buildDir}/docs/javadoc/"
                        } catch (e) {
                            logger.warn "${dep.name} javadoc won't be linked", e
                        }
                    }
                }
            }
            dependsOn build
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc
            classifier = 'javadoc'
        }

        plugins.withType(digital.wup.android_maven_publish.AndroidMavenPublishPlugin) {
            def collectDependenciesForConfiguration = { Set<ProjectDependency> projectDependencies, Project project, String name ->
                Configuration config = project.configurations.findByName(name)
                if (config != null) {
                    config.dependencies.withType(ProjectDependency.class).forEach {
                        dep -> projectDependencies.add(dep)
                    }
                }
            }
            def isAndroidProject = { String groupId, String artifactId, Set<ProjectDependency> deps ->
                for (dep in deps) {
                    if (dep.group == groupId && dep.name == artifactId) {
                        return dep.getDependencyProject().plugins.hasPlugin(LibraryPlugin.class)
                    }
                }
                return false
            }
            publishing {
                publications {
                    maven(MavenPublication) { MavenPublication publication ->
                        from components.android
                        artifact sourcesJar
                        artifact javadocJar
                        initPublication(publication)
                        afterEvaluate {
                            Set<ProjectDependency> allDeps = new HashSet<>()
                            collectDependenciesForConfiguration(allDeps, project, "api")
                            collectDependenciesForConfiguration(allDeps, project, "implementation")
                            collectDependenciesForConfiguration(allDeps, project, "compile")
                            generatePomFileForMavenPublication.doFirst {
                                List<org.gradle.api.publish.maven.internal.dependencies.MavenDependencyInternal> dependencies = new ArrayList<>()
                                dependencies.addAll(publication.apiDependencies)
                                dependencies.addAll(publication.runtimeDependencies)
                                dependencies.forEach { org.gradle.api.publish.maven.internal.dependencies.MavenDependencyInternal dep ->
                                    if (dep == null) {
                                        return
                                    }
                                    if (isAndroidProject(dep.groupId, dep.artifactId, allDeps)) {
                                        dep.artifacts.add(new org.gradle.api.internal.artifacts.dependencies.DefaultDependencyArtifact(dep.artifactId, "aar", null, null, null))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    plugins.withType(JavaPlugin) {
        task sourcesJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc
            classifier = 'javadoc'
        }

        plugins.withType(MavenPublishPlugin) {
            publishing {
                publications {
                    maven(MavenPublication) { MavenPublication publication ->
                        from components.java
                        artifact sourcesJar
                        artifact javadocJar
                        initPublication(publication)
                    }
                }
            }
        }
    }
    plugins.withType(BintrayPlugin) {
        bintray {
            if (project.hasProperty('artifactoryUser')) {
                user = artifactoryUser
                key = artifactoryApiKey
            }
            publications = ['maven']
            publish = true
            pkg {
                repo = 'maven'
                userOrg = 'acra'
                afterEvaluate {
                    org.gradle.api.publish.maven.MavenPom pom = publishing.publications.maven.pom
                    name = pom.name.get()
                    websiteUrl = pom.url.get()
                    vcsUrl = pom.scm.url.get()
                    licenses = pom.licenses.collect { l -> l.name.get() }
                    desc = pom.description.get()
                }
                publicDownloadNumbers = true
                version {
                    name = project.version
                    if (hasProperty('ossrhUser')) {
                        mavenCentralSync {
                            sync = true
                            user = ossrhUser
                            password = ossrhPassword
                        }
                    }
                }
            }
        }
        bintrayUpload.dependsOn(build, javadocJar, sourcesJar, 'generatePomFileForMavenPublication')
        rootProject.afterReleaseBuild.dependsOn bintrayUpload
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task joinedJavadoc(type: Javadoc) {
    subprojects { project ->
        afterEvaluate {
            def tasks = project.tasks.withType(Javadoc)
            rootProject.joinedJavadoc {
                source += files(tasks.collect { it.source })
                classpath += files(tasks.collect { it.classpath })
                dependsOn tasks.collect { it.dependsOn }
            }
            plugins.withType(LibraryPlugin) {
                rootProject.joinedJavadoc {
                    options.with {
                        linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
                    }
                    doFirst {
                        classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
                    }
                }
            }
        }
    }
    destinationDir = file("${project.buildDir}/javadoc")
}
